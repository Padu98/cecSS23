import urllib.request
import json
import os
import ssl



##neu hinzugefügt für eigene bilder

import base64
##Dateipfad von bild bei bedarf ändern
#binary_fc = open('/home/pi/Dokumente/CEC_Projekt_1/Echinocytes-Test/E (9).png', "rb").read()
#base64_img = base64.b64encode(binary_fc).decode("utf-8")

img_folder_path = "CEC_ML_Portraits_png (1)/Portraits_png/all_test"

##file = [f for f in os.listdir(img_folder_path)]


def allowSelfSignedHttps(allowed):
    # bypass the server certificate verification on client side
    if allowed and not os.environ.get('PYTHONHTTPSVERIFY', '') and getattr(ssl, '_create_unverified_context', None):
        ssl._create_default_https_context = ssl._create_unverified_context

allowSelfSignedHttps(True) # this line is needed if you use self-signed certificate in your scoring service.

# Request data goes here
# The example below assumes JSON formatting which may be updated
# depending on the format your endpoint expects.
# More information can be found here:
# https://docs.microsoft.com/azure/machine-learning/how-to-deploy-advanced-entry-script
for img_path in os.listdir(img_folder_path):
    def allowSelfSignedHttps(allowed):
        # bypass the server certificate verification on client side
        if allowed and not os.environ.get('PYTHONHTTPSVERIFY', '') and getattr(ssl, '_create_unverified_context', None):
            ssl._create_default_https_context = ssl._create_unverified_context


    allowSelfSignedHttps(True)  # this line is needed if you use self-signed certificate in your scoring service.

    binary_fc = open(img_folder_path+"/"+img_path, "rb").read()
    base64_img = base64.b64encode(binary_fc).decode("utf-8")
    print(img_path)
    data =  {
      "Inputs": {
        "WebServiceInput0": [
          {
            "image": "data:image/png;base64, "+ base64_img,
    #",
            "id": 0,
            "category": "Discocytes-Train"
          }
        ]
      },
      "GlobalParameters": {}
    }

    body = str.encode(json.dumps(data))

    url = 'http://d999a40e-8f10-47ee-997b-7595c17ce16b.northeurope.azurecontainer.io/score'
    # Replace this with the primary/secondary key or AMLToken for the endpoint
    api_key = '1DPxrLElirClIrsxTADDSDHYngKoH5Zo'
    if not api_key:
        raise Exception("A key should be provided to invoke the endpoint")


    headers = {'Content-Type':'application/json', 'Authorization':('Bearer '+ api_key)}

    req = urllib.request.Request(url, body, headers)

    try:
        response = urllib.request.urlopen(req)

        result = response.read()
        print(result)
    except urllib.error.HTTPError as error:
        print("The request failed with status code: " + str(error.code))

        # Print the headers - they include the requert ID and the timestamp, which are useful for debugging the failure
        print(error.info())
        print(error.read().decode("utf8", 'ignore'))
